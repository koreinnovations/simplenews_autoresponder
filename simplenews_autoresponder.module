<?php

/**
 * Implementation of hook_perm().
 */
function simplenews_autoresponder_perm() {
  return array('administer simplenews autoresponders');
}

/**
 * Implementation of hook_menu().
 */
function simplenews_autoresponder_menu() {

  $items = array();

  $items['admin/settings/simplenews_autoresponder'] = array(
      'title' => t('Simplenews autoresponder'),
      'description' => t('Configuration page for Simplenews autoresponder module.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simplenews_autoresponder_admin'),
      'access arguments' => array('administer simplenews autoresponders'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/admin.inc',
  );

  $items['admin/settings/simplenews_autoresponder/add'] = array(
      'title' => t('Simplenews autoresponder'),
      'description' => t('Add new autoresponder.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simplenews_autoresponder_admin_edit'),
      'access arguments' => array('administer simplenews autoresponders'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/admin.inc',
  );

  $items['admin/settings/simplenews_autoresponder/edit/%'] = array(
      'title' => t('Edit autoresponder'),
      'description' => t('Edit given autoresponder.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simplenews_autoresponder_admin_edit', 4),
      'access arguments' => array('administer simplenews autoresponders'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/admin.inc',
  );

  $items['admin/settings/simplenews_autoresponder/delete/%'] = array(
      'title' => t('Delete autoresponder'),
      'description' => t('Delete given autoresponder.'),
      'page callback' => 'drupal_get_form',
      'page arguments' => array('simplenews_autoresponder_admin_delete', 4),
      'access arguments' => array('administer simplenews autoresponders'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'includes/admin.inc',
  );


  return $items;
}

/**
 * Implements hook_cron().
 */
function simplenews_autoresponder_cron() {
  
}

/**
 * Implementation of hook_form_alter().
 */
function simplenews_autoresponder_form_alter(&$form, $form_state, $form_id) {
  // If we dont have permission to set the title then we need to abort this alter now!
  if (!user_access('administer simplenews autoresponders'))
    return;

  // Check we're editing a node and also check that the node type's 'show field' is enabled
  if ($form['#id'] == 'node-form') {
    $terms = simplenews_autoresponder_get_tids();

    if (!empty($terms)) {
      foreach ($terms as $tid => $term_name) {
        $autoresponder = simplenews_get_autoresponder_by_tid($tid);
        if ($autoresponder) {
          $key = 'simplenews_autoresponder_offset_' . $autoresponder->id;
          $form[$key] = array(
              '#type' => 'textfield',
              '#title' => t('Simplenews autoresponder offset for %name', array('%name' => $autoresponder->name)),
              '#description' => t("How many days after the user subscribed should this message be sent?"),
              '#default_value' => $form['#node']->{$key},
              '#size' => 60,
          );
        }
      }
    }
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function simplenews_autoresponder_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  switch ($op) {
    case 'update':
    case 'insert':

      if (user_access('administer simplenews autoresponders')) {

        $offsets = simplenews_autoresponder_get_message_offsets_by_nid($node->nid);
        $terms = simplenews_autoresponder_get_tids();

        foreach ($terms as $tid => $term_name) {
          $autoresponder = simplenews_get_autoresponder_by_tid($tid);
          $key = 'simplenews_autoresponder_offset_' . $autoresponder->id;
          if (isset($node->{$key})) {
            $offset = $node->{$key};

            if (array_key_exists($autoresponder->id, $offsets)) {
              // update
              db_query("UPDATE {simplenews_autoresponder_messages} SET offset = %d WHERE nid = %d AND autoresponder_id = %d", $offset, $node->nid, $autoresponder->id);
            }
            else {
              // insert
              db_query("INSERT INTO {simplenews_autoresponder_messages} (nid, autoresponder_id, offset) VALUES (%d, %d, %d)", $node->nid, $autoresponder->id, $offset);
            }
          }
          else {
            db_query('DELETE FROM {simplenews_autoresponder_messages} WHERE nid = %d AND autoresponder_id = %d', $node->nid, $autoresponder->id);
          }
        }
      }
      break;

    case 'delete':
      db_query('DELETE FROM {simplenews_autoresponder_messages} WHERE nid = %d', $node->nid);
      break;

    case 'load':
      $offsets = simplenews_autoresponder_get_message_offsets_by_nid($node->nid);
      $data = array();
      foreach ($offsets as $autoresponder_id => $offset) {
        $data['simplenews_autoresponder_offset_' . $autoresponder_id] = $offset;
      }
      return $data;
  }
}

/**
 * Returns an associative array of the autoresponder message offsets for the
 * given node id.
 * 
 * A message can belong to more than one autoresponder.  The array that is returned
 * is an associative array where the key is the autoresponder id and the value is 
 * the message offset.
 */
function simplenews_autoresponder_get_message_offsets_by_nid($nid) {
  $sql = 'SELECT * FROM {simplenews_autoresponder_messages} WHERE nid = %d';
  $result = db_query($sql, $nid);
  $data = array();
  while ($item = db_fetch_object($result)) {
    $data[$item->autoresponder_id] = $item->offset;
  }
  return $data;
}

/**
 * Returns data about terms in Simplenews vocabulary.
 * 
 * @return array that can be used as options for select form element.
 */
function simplenews_autoresponder_get_tids() {
  //get simplenews terms
  $vid = variable_get('simplenews_vid', -1);
  $terms = db_query("SELECT * FROM {term_data} WHERE vid=%d", $vid);
  $terms_array = Array();
  while ($row = db_fetch_array($terms)) {
    $terms_array[$row['tid']] = t($row['name']);
  }

  return $terms_array;
}

/**
 * Returns info about possible ordering settings.
 * 
 * @return Array of possible order fields.
 */
function simplenews_autoresponder_get_sort() {
  return Array(
      0 => t('nid'),
      1 => t('updated time'),
  );
}

/**
 * Loads one newsletter from DB and returns it as array.
 * 
 * @param $id ID of seq. newsletter to be loaded from DB.
 * 
 * @return seq. newsletter as array.
 */
function simplenews_autoresponder_get_item($id) {
  $result = db_query("SELECT * FROM {simplenews_autoresponder} WHERE id = %d AND status <> 2", $id);
  if ($result) {
    $item = db_fetch_object($result);
    return array(
        'name' => $item->name,
        'enabled' => $item->status,
        'tid' => $item->tid,
        'id' => $item->id,
        'sort' => $item->sort,
    );
  }
  else {
    drupal_goto('admin/settings/simplenews_autoresponder');
  }
}

/**
 * Returns all acitve items as an array.
 * 
 * @return Array that can be passed to theme_table().
 */
function simplenews_get_active_autoresponders() {
  $data = array();
  $result = db_query("SELECT *  FROM {simplenews_autoresponder} WHERE status <> 2 ORDER BY id ASC");

  while ($item = db_fetch_object($result)) {
    $data[] = $item;
  }

  return $data;
}

/**
 * Returns all active autoresponder subscribers for the given autoresponder id
 */
function simplenews_get_autoresponder_subscribers($id) {
  $sql = "SELECT * FROM {simplenews_autoresponder_subscriptions} s WHERE s.autoresponder_id = %d";
  $result = db_query($sql, $id);
  $data = array();

  while ($item = db_fetch_object($result)) {
    $data[] = $item;
  }

  return $data;
}

/**
 * Returns an autoresponder based on the given term ID
 */
function simplenews_get_autoresponder_by_tid($tid) {
  $sql = "SELECT * FROM {simplenews_autoresponders} WHERE tid = %d";
  $result = db_fetch_object(db_query($sql, $tid));
  return $result;
}
